name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    paths-ignore:
      - "docs/**"
      - "benchmarks/**"
      - "README.rst"
  release:
    types: [published]

jobs:
  lint:
    name: Lint and flake code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          pip install pytest black flake8 mypy

      - name: Build Msgspec
        run: |
          pip install -e .

      - name: black
        run: black .

      - name: flake8
        run: flake8 .

      - name: mypy
        run: py.test tests/test_mypy.py

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]

    steps:
      - uses: actions/checkout@v2

      - name: Build & Test Wheels
        uses: joerick/cibuildwheel@v1.9.0
        env:
          CIBW_TEST_REQUIRES: "pytest msgpack orjson"
          CIBW_TEST_COMMAND: "pytest {project}/tests"
          CIBW_BUILD: "cp38-* cp39-* cp310-*"
          CIBW_SKIP: "*-win32 *_i686 *_s390x *_ppc64le"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Build source distribution
        run: python setup.py sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
