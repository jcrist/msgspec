name: Build and Test

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    paths:
    - "msgspec/**"
    - ".github/workflows/ci.yml"
    - ".pre-commit-config.yaml"
    - "pyproject.toml"
    - "setup.py"
    - "setup.cfg"
  release:
    types:
    - published

jobs:
  validate:
    name: Run static analysis and smoke tests
    runs-on: ubuntu-latest

    outputs:
      sdist-name: "${{ steps.build-sdist.outputs.file-name }}"

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Load environment file
      uses: ./.github/actions/load-env

    - name: Install Python
      uses: actions/setup-python@v6
      with:
        python-version-file: pyproject.toml

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Run pre-commit hooks
      # Run `pre-commit` in an isolated environment to prevent test pollution.
      run: uvx --with pre-commit-uv pre-commit run --all-files --show-diff-on-failure

    - name: Install project and test dependencies
      run: uv sync --group test

    - name: Test Mypy compatibility
      run: uv run -- pytest tests/test_mypy.py

    - name: Test Pyright compatibility
      run: uv run -- pytest tests/test_pyright.py

    - name: Run Doctests
      run: uv run -- pytest --doctest-modules --pyargs msgspec

    - name: Build source distribution
      id: build-sdist
      run: |-
        git clean -fdX
        uv build --sdist
        sdist_name=$(basename dist/*.tar.gz)
        echo "file-name=${sdist_name}" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v5
      with:
        name: artifact-sdist
        path: dist/${{ steps.build-sdist.outputs.file-name }}
        if-no-files-found: error

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    needs:
    - validate
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        # - windows-latest
        # - macos-latest
        python-version:
        - "3.9"
        - "3.10"
        - "3.11"
        - "3.12"
        # TODO: Enable this once fixed https://github.com/jcrist/msgspec/issues/910
        # - "3.13"
        - "3.14"

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Load environment file
      uses: ./.github/actions/load-env

    - name: Install Python
      uses: actions/setup-python@v6
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Install project with sanitizers & coverage
      env:
        MSGSPEC_SANITIZE: "true"
        MSGSPEC_COVERAGE: "true"
      run: uv sync --group test-unit

    - name: Run tests with sanitizers
      env:
        PYTHONMALLOC: "malloc"
        ASAN_OPTIONS: "detect_leaks=0"
      run: >-
        LD_PRELOAD=`gcc -print-file-name=libasan.so`
        uv run -- coverage run -m pytest -s

    - name: Generate coverage files
      run: |-
        uv run -- coverage xml
        gcov -abcu `find build/temp*/ -name *.o`

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v5
      with:
        name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
        path: |-
          coverage.xml
          _core.c.gcov
          atof.h.gcov
          ryu.h.gcov
        if-no-files-found: error

  upload-coverage:
    name: Upload coverage files to Codecov
    needs:
    - test
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download coverage artifacts
      uses: actions/download-artifact@v5
      with:
        pattern: coverage-*
        path: coverage-files

    - name: See the coverage files
      run: tree -sh coverage-files

    - name: Upload Codecov
      uses: codecov/codecov-action@v5
      with:
        use_oidc: true
        directory: coverage-files

  build-wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.archs }}
    needs:
    - test
    - validate
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04-arm
          archs: aarch64
        - os: ubuntu-latest
          archs: x86_64
        - os: macos-latest
          archs: arm64
        - os: macos-15-intel
          archs: x86_64
        # - os: windows-11-arm
        #   archs: ARM64
        - os: windows-latest
          archs: AMD64

    env:
      CIBW_SKIP: "${{ github.event_name != 'release' && '*-musllinux_*' || '' }}"

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download source distribution
      uses: actions/download-artifact@v6
      with:
        name: artifact-sdist
        path: dist

    # TODO: Remove this once the action supports specifying extras, see:
    # https://github.com/pypa/cibuildwheel/pull/2630
    - name: Install uv
      if: runner.os != 'Linux'
      uses: astral-sh/setup-uv@v7

    - name: Build & Test Wheels
      uses: pypa/cibuildwheel@v3.2.1
      with:
        package-dir: dist/${{ needs.validate.outputs.sdist-name }}
      env:
        CIBW_ARCHS: "${{ matrix.archs }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v5
      with:
        name: artifact-wheels-${{ matrix.os }}-${{ matrix.archs }}
        path: wheelhouse/*.whl
        if-no-files-found: error

  upload-pypi:
    name: Upload artifacts to PyPI
    if: github.event_name == 'release' && github.event.action == 'published'
    needs:
    - validate
    - build-wheels
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - uses: actions/download-artifact@v6
      with:
        pattern: artifact-*
        merge-multiple: true
        path: dist

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
