name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - "msgspec/**"
      - ".github/workflows/ci.yml"
      - ".pre-commit-config.yaml"
      - "pyproject.toml"
      - "setup.py"
      - "setup.cfg"
  release:
    types: [published]

jobs:
  lint:
    name: Run static analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build msgspec and install dependencies
        run: |
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: mypy
        run: pytest tests/test_mypy.py

      - name: pyright
        run: pytest tests/test_pyright.py

      - name: doctests
        run: pytest --doctest-modules msgspec

      - name: Rebuild with sanitizers & coverage
        env:
          MSGSPEC_SANITIZE: "true"
          MSGSPEC_COVERAGE: "true"
        run: |
          python setup.py clean --all
          # I know this is deprecated, but I can't find a way to keep the build
          # directory around anymore on new versions of setuptools
          python setup.py develop

      - name: Run tests with sanitizers
        env:
          PYTHONMALLOC: "malloc"
          ASAN_OPTIONS: "detect_leaks=0"
        run: |
          LD_PRELOAD=`gcc -print-file-name=libasan.so` coverage run -m pytest -s -m "not mypy and not pyright"

      - name: Generate coverage files
        run: |
          coverage xml
          gcov -abcu `find build/ -name *.o`

      - name: Upload Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml,_core.c.gcov,atof.h.gcov,ryu.h.gcov

  build_sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest

    outputs:
      artifact-name: ${{ steps.locate-artifact.outputs.file-name }}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Build source distribution
        run: uv build --sdist

      - name: Locate source distribution
        id: locate-artifact
        run: |-
          sdist_name=$(basename dist/*)
          echo "file-name=${sdist_name}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-sdist
          path: dist/${{ steps.locate-artifact.outputs.file-name }}
          if-no-files-found: error

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.archs }}
    needs:
      - build_sdist
      - lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04-arm
          archs: aarch64
        - os: ubuntu-latest
          archs: x86_64
        - os: macos-latest
          archs: arm64
        - os: macos-15-intel
          archs: x86_64
        # - os: windows-11-arm
        #   archs: ARM64
        - os: windows-latest
          archs: AMD64

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Environment
        if: github.event_name != 'release'
        run: |
            echo "CIBW_SKIP=${CIBW_SKIP} *-musllinux_* cp39-*_aarch64 cp311-*_aarch64 cp312-*_aarch64 cp313-*_aarch64 cp314-*_aarch64 cp314t-*_aarch64" >> $GITHUB_ENV

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: artifact-sdist
          path: dist

      # TODO: Remove this once the action supports specifying extras, see:
      # https://github.com/pypa/cibuildwheel/pull/2630
      - name: Install uv
        if: runner.os != 'Linux'
        uses: astral-sh/setup-uv@v7

      - name: Build & Test Wheels
        uses: pypa/cibuildwheel@v3.2.1
        with:
          package-dir: dist/${{ needs.build_sdist.outputs.artifact-name }}
        env:
          CIBW_ARCHS: ${{ matrix.archs }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          name: artifact-wheels-${{ matrix.os }}-${{ matrix.archs }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist
          pattern: artifact-*

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
